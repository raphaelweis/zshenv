#!/bin/bash

# options
showHelp() {
  echo "This script uses GNU stow to create symbolic links for the configuration files in this directory"
  echo
  echo "Syntax: link [options]"
  echo "options:"
  echo "-h    Show this help message"
  echo "-c    Choose a specific host configuration (default: general configuration)"
  echo "-t    Override the default target directory (XDG_CONFIG_HOME/PROGRAM_NAME by default)"
  echo "-d    Delete the directory linked to this repository"
}

pickHost() {
  if [ $host = "default" ]; then
    mkdir -p $PROGRAM_TARGET
    if [ ! -d "$SCRIPT_PATH/default" ]; then
      echo "Error: The files for this configuration are missing"
      exit 1
    fi
    stow -d $SCRIPT_PATH/default $PROGRAM_NAME -t $PROGRAM_TARGET

    if [ $? -eq 0 ]; then
      echo "Successfully created symbolic links for the $PROGRAM_NAME package"
      echo "    - The configuration is $host"
      echo "    - The target is $PROGRAM_TARGET"
    else
      echo "Error: Failed to create symbolic links in configuration $host"
      exit 1
    fi

    exit 0
  fi
  if [ $host = "file" ]; then
    mkdir -p $STRIPPED_TARGET
    if [ ! -d "$SCRIPT_PATH/file" ]; then
      echo "Error: The files for this configuration are missing"
      exit 1
    fi
    stow -d $SCRIPT_PATH/file $PROGRAM_NAME -t $STRIPPED_TARGET

    if [ $? -eq 0 ]; then
      echo "Successfully created symbolic links for the $PROGRAM_NAME package"
      echo "    - The configuration is $host"
      echo "    - The target is $STRIPPED_TARGET"
    else
      echo "Error: Failed to create symbolic links in configuration $host"
      exit 1
    fi

    exit 0
  fi
  if [ $host = "sudo" ]; then
    sudo mkdir -p $STRIPPED_TARGET
    if [ ! -d "$SCRIPT_PATH/sudo" ]; then
      echo "Error: The files for this configuration are missing"
      exit 1
    fi
    sudo \cp -rf $SCRIPT_PATH/sudo/$PROGRAM_NAME/. $STRIPPED_TARGET

    if [ $? -eq 0 ]; then
      echo "Successfully copied files for the $PROGRAM_NAME package"
      echo "    - The configuration is $host"
      echo "    - The target is $STRIPPED_TARGET"
    else
      echo "Error: Failed to copy files in configuration $host"
      exit 1
    fi

    exit 0
  fi
  if [ $host = "laptop" ]; then
    mkdir -p $PROGRAM_TARGET
    if [ ! -d "$SCRIPT_PATH/laptop" ]; then
      echo "Error: The files for this configuration are missing"
      exit 1
    fi
    stow -d $SCRIPT_PATH/default $PROGRAM_NAME -t $PROGRAM_TARGET
    stow -d $SCRIPT_PATH/laptop $PROGRAM_NAME -t $PROGRAM_TARGET

    if [ $? -eq 0 ]; then
      echo "Successfully created symbolic links for the $PROGRAM_NAME package"
      echo "    - The configuration is $host"
      echo "    - The target is $PROGRAM_TARGET"
    else
      echo "Error: Failed to create symbolic links in configuration $host"
      exit 1
    fi

    exit 0
  fi
  if [ $host = "desktop" ]; then
    mkdir -p $PROGRAM_TARGET
    if [ ! -d "$SCRIPT_PATH/desktop" ]; then
      echo "Error: The files for this configuration are missing"
      exit 1
    fi
    stow -d $SCRIPT_PATH/default $PROGRAM_NAME -t $PROGRAM_TARGET
    stow -d $SCRIPT_PATH/desktop $PROGRAM_NAME -t $PROGRAM_TARGET

    if [ $? -eq 0 ]; then
      echo "Successfully created symbolic links for the $PROGRAM_NAME package"
      echo "    - The configuration is $host"
      echo "    - The target is $PROGRAM_TARGET"
    else
      echo "Error: Failed to create symbolic links in configuration $host"
      exit 1
    fi

    exit 0
  fi
  echo "Error: There is no configuration matching this host"
  exit 1
}

deletePackage() {
  rm -r $PROGRAM_TARGET
  if [ $? -eq 0 ]; then
    echo "$PROGRAM_NAME package successfully deleted"
  fi
}

# find program name with the name of the parent directory
SCRIPT=$(realpath "$0")
SCRIPT_PATH=$(dirname "$SCRIPT")
PROGRAM_NAME=$(basename "$SCRIPT_PATH")

# set variables
host=""

# resolve target by resolving the contents of the target.txt file
TARGET_FILE_CONTENT=$(cat $SCRIPT_PATH/target.txt)
STRIPPED_TARGET=$(eval "echo \"$TARGET_FILE_CONTENT\"")
PROGRAM_TARGET=$STRIPPED_TARGET/$PROGRAM_NAME

# read the options
while getopts ":h:c:t:d" option; do
  case $option in
    h) # display help
      showHelp
      exit 0;;
    c) # specify host
      host=$OPTARG;;
    t) # override target
      PROGRAM_TARGET=$OPTARG;;
    d) # delete stow packages
      deletePackage
      exit 0;;
    :) # missing argument for option
      echo "Error: Option -$OPTARG requires an argument"
      exit;;
    \?) # invalid option
      echo "Error: Invalid option"
      exit 1;;
  esac
done

# set host
if [ -n "$host" ]; then
  pickHost
fi

# show help if no options have been passed in
showHelp
exit 1;
